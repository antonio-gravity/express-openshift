{{ $appname := include "helm.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $appname }}
  labels:
    app: {{ .Release.Name }}
    {{- include "helm.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        app: {{ .Release.Name }}
        {{- include "helm.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "helm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: LOG_LEVEL
              value: {{ .Values.loggingLevel | quote }}
            - name: CONTEXT_PATH
              value: {{ .Values.contextPath | quote }}
          {{- if .Values.sectext.enabled }}
            - name: SECTEXT_KEY
              valueFrom:
                  secretKeyRef:
                    key: SECTEXT_KEY
                    name: {{ .Values.sectext.secretName | default "sectext" }}
          {{- end }}
          {{- range $key, $val := .Values.secretEnvironmentVars }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  key: {{ $key }}
                  name: {{ $appname }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.contextPath }}/monitor/health/liveness
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 30 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.contextPath }}/monitor/health/readiness
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 40 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 10 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
